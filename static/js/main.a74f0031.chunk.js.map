{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","type","placeholder","onChange","e","target","value","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAEaA,G,MAAK,SAACC,GACf,OACA,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,aCHbC,G,MAAU,SAACR,GACxB,OAAO,qBAAKC,UAAU,YAAf,SAECD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WC2BhBM,G,wDA9Bb,aAAc,IAAD,8BACX,gBACKC,MAAM,CACTH,SAAS,GACTI,YAAY,IAJH,E,gEAQZ,IAAD,OACEC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAE,EAAKC,SAAS,CACzBV,SAASS,S,+BAGJ,IAAD,SAC0BE,KAAKR,MAA7BC,EADF,EACEA,YACFQ,EAFA,EACcZ,SACYa,QAAO,SAAAlB,GAAO,OAAEA,EAAQE,KAAKiB,cAAcC,SAASX,EAAYU,kBAElG,OACE,sBAAKtB,UAAU,MAAf,UACE,uBAAOwB,KAAK,SAASC,YAAY,kBAAkBC,SAAU,SAAAC,GAAC,OAAE,EAAKT,SAAS,CAACN,YAAYe,EAAEC,OAAOC,WACpG,cAAC,EAAD,CAAUrB,SAAUY,W,GAvBRU,IAAMC,YCQTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a74f0031.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css'\r\nexport const Card=(props)=>{\r\n    return(\r\n    <div className='card-container'>\r\n        <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>)\r\n}","import React from 'react'\r\nimport {Card} from '../card/card.component'\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList =(props)=> {\r\nreturn(<div className='card-list'>\r\n    {\r\n        props.monsters.map(monster => \r\n            <Card key={monster.id} monster={monster}/>)\r\n      }</div>);}","import React from'react'\nimport { CardList } from './components/card-list/card-list.component'\nimport './App.css';\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state={\n      monsters:[],\n      searchField:'',\n    };\n  }\n  componentDidMount()\n  {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users=>this.setState({\n      monsters:users,\n    }))\n  }\n  render(){\n    const { searchField,monsters }= this.state; //destructuring \n    const filteredMonsters=monsters.filter(monster=>monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n  return (\n    <div className=\"App\">\n      <input type='search' placeholder='search monsters' onChange={e=>this.setState({searchField:e.target.value})}/>\n      <CardList monsters={filteredMonsters}>\n      \n       </CardList>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}